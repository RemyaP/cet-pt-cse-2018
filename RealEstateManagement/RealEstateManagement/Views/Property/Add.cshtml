@model RealEstateManagement.Models.PropertyViewModel
@{
    ViewBag.Title = "Add";
}

<h2>@ViewBag.Title.</h2>
<script async defer src="https://maps.googleapis.com/maps/api/js?key=AIzaSyCF3zz-BVxSoOyd-G7tgfPjAoPKPNCRmas&libraries=places&callback=initMap"></script>
<script>
    var icon = {  //Will contain the style of marker icon
        url: place.icon,
        size: new google.maps.Size(71, 71),
        origin: new google.maps.Point(0, 0),
        anchor: new google.maps.Point(17, 34),
        scaledSize: new google.maps.Size(25, 25)
    };
    var map; //Will contain map object.
    function initMap() {
        var centerLatLng = new google.maps.LatLng(9.9312328, 76.26730409999999);
        var options = {
            center: centerLatLng,
            zoom: 13,
            //mapTypeId: 'roadmap'
        }
        map = new google.maps.Map(document.getElementById('map'), options);

        // Create the search box and link it to the UI element.
        var input = document.getElementById('pac_input');
        var searchBox = new google.maps.places.SearchBox(input);
        map.controls[google.maps.ControlPosition.TOP_LEFT].push(input);

        // Bias the SearchBox results towards current map's viewport.
        map.addListener('bounds_changed', function () {
            searchBox.setBounds(map.getBounds());
        });

        var markers = [];
        // Listen for the event fired when the user selects a prediction and retrieve
        // more details for that place.
        searchBox.addListener('places_changed', function () {
            var places = searchBox.getPlaces();
            if (places.length == 0) {
                return;
            }

            // Clear out the old markers.
            markers.forEach(function (marker) {
                marker.setMap(null);
            });
            markers = [];

            // For each place, get the icon, name and location.
            var bounds = new google.maps.LatLngBounds();
            places.forEach(function (place) {
                if (!place.geometry) {
                    console.log("Returned place contains no geometry");
                    return;
                }

                // Create a marker for each place.
                markers.push(new google.maps.Marker({
                    map: map,
                    icon: icon,
                    title: place.name,
                    position: place.geometry.location
                }));

                if (place.geometry.viewport) {
                    // Only geocodes have viewport.
                    bounds.union(place.geometry.viewport);
                } else {
                    bounds.extend(place.geometry.location);
                }
            });
            map.fitBounds(bounds);
        });

        //Pick location
        //Listen for any clicks on the map.
        google.maps.event.addListener(map, 'click', function (event) {
            //Get the location that the user clicked.
            var clickedLocation = event.latLng;
            //If the marker hasn't been added.
            //Create the marker.
            marker = new google.maps.Marker({
                icon: icon,
                position: clickedLocation,
                map: map,
                draggable: true //make it draggable
            });
            //Listen for drag events!
            google.maps.event.addListener(marker, 'dragend', function (event) {
                markerLocation();
            });
            //Get the marker's location.
            markerLocation();
        });
    }

    //This function will get the marker's current location and then add the lat/long
    //values to our textfields so that we can save the location.
    function markerLocation() {
        //Get location.
        var currentLocation = marker.getPosition();
        var lat = currentLocation.lat();
        var lng = currentLocation.lng();
        document.getElementById('Latitude').value = lat;
        document.getElementById('Longitude').value = lng;
    }

    //Load the map when the page has finished loading.
    google.maps.event.addDomListener(window, 'load', initMap);
    document.bind("projectLoadComplete", initMap);
</script>

@using( Html.BeginForm( "Create", "Property", FormMethod.Post, new { @class = "form-horizontal", role = "form" } ) )
{
    @Html.AntiForgeryToken()
    <h4>Create a new property.</h4>
        <hr />
        @Html.ValidationSummary( "", new { @class = "text-danger" } )
        <div class="form-group">
            @Html.LabelFor( m => m.Area, new { @class = "col-md-2 control-label" } )
            <div class="col-md-10">
                @Html.TextBoxFor( m => m.Area, new { @class = "form-control" } )
            </div>
        </div>
        <div class="form-group">
            @Html.LabelFor( m => m.Category, new { @class = "col-md-2 control-label" } )
            <div class="col-md-10">
                @Html.DropDownListFor( m => m.Category, Model.Categories, new { @class = "form-control" } )
            </div>
        </div>
        <div class="form-group">
            <label class="col-md-2 control-label">Pick loction from map</label>
            <div class="col-md-10">
                <input id="pac_input" class="controls" type="text" placeholder="Search Box"><br />
                <div id="map" style="width: 100%; height: 400px; border: 5px solid #5E5454;"></div>
            </div>
        </div>
        <div>
            @Html.HiddenFor( m => m.Latitude )
            @Html.HiddenFor( m => m.Longitude )
        </div>
        <div class="form-group">
            <div class="col-md-offset-2 col-md-10">
                <input type="submit" class="btn btn-default" value="Add Preperty" />
            </div>
        </div>
}

@section Scripts {
    @Scripts.Render( "~/bundles/jqueryval" )
}
