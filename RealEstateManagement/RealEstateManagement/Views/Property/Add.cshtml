@model RealEstateManagement.Models.PropertyViewModel
@{
    ViewBag.Title = "Add";
}

<!--===============================================================================================-->
<link rel="stylesheet" type="text/css" href="~/Table/fonts/Awesome/css/font-awesome.min.css" />
<link rel="stylesheet" type="text/css" href="~/Form/fonts/iconic/css/material-design-iconic-font.min.css" />
<link rel="stylesheet" type="text/css" href="~/Table/css/animate.css" />
<link rel="stylesheet" type="text/css" href="~/Form/css-hamburgers/hamburgers.min.css" />
<link rel="stylesheet" type="text/css" href="~/Form/animsition/css/animsition.min.css" />
<link rel="stylesheet" type="text/css" href="~/Table/select/select2.min.css" />
<link rel="stylesheet" type="text/css" href="~/Form/daterangepicker/daterangepicker.css">
<link rel="stylesheet" type="text/css" href="~/Form/noui/nouislider.min.css">
<link rel="stylesheet" type="text/css" href="~/Form/css/util.css">
<link rel="stylesheet" type="text/css" href="~/Form/css/main.css">
<script src="~/Form/animsition/js/animsition.min.js"></script>
<script src="~/Table/select/select2.min.js"></script>
<script src="~/Form/daterangepicker/moment.min.js"></script>
<script src="~/Form/daterangepicker/daterangepicker.js"></script>
<script src="~/Form/countdowntime/countdowntime.js"></script>
<script src="~/Form/noui/nouislider.min.js"></script>
<script src="~/Form/js/main.js"></script>
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-23581568-13"></script>
<!--===============================================================================================-->
<script async defer src="https://maps.googleapis.com/maps/api/js?key=AIzaSyBTsGPiFNyGh8NSk8yRT6J_UafU-XcwIGw&libraries=places&callback=initMap"></script>
<script type="text/javascript" src="https://maps.googleapis.com/maps/api/js?key=AIzaSyBTsGPiFNyGh8NSk8yRT6J_UafU-XcwIGw&libraries=places"></script>
<script>
    var icon = {  //Will contain the style of marker icon
        url: place.icon,
        size: new google.maps.Size(71, 71),
        origin: new google.maps.Point(0, 0),
        anchor: new google.maps.Point(17, 34),
        scaledSize: new google.maps.Size(25, 25)
    };
    var map; //Will contain map object.
    var service;
    function initMap() {
        var centerLatLng = new google.maps.LatLng(9.9312328, 76.26730409999999);
        var options = {
            center: centerLatLng,
            zoom: 13,
            //mapTypeId: 'roadmap'
        }
        map = new google.maps.Map(document.getElementById('map'), options);

        // Create the search box and link it to the UI element.
        var input = document.getElementById('pac_input');
        var searchBox = new google.maps.places.SearchBox(input);
        map.controls[google.maps.ControlPosition.TOP_LEFT].push(input);

        // Bias the SearchBox results towards current map's viewport.
        map.addListener('bounds_changed', function () {
            searchBox.setBounds(map.getBounds());
        });

        var markers = [];
        // Listen for the event fired when the user selects a prediction and retrieve
        // more details for that place.
        searchBox.addListener('places_changed', function () {
            var places = searchBox.getPlaces();
            if (places.length == 0) {
                return;
            }

            // Clear out the old markers.
            markers.forEach(function (marker) {
                marker.setMap(null);
            });
            markers = [];

            // For each place, get the icon, name and location.
            var bounds = new google.maps.LatLngBounds();
            places.forEach(function (place) {
                if (!place.geometry) {
                    console.log("Returned place contains no geometry");
                    return;
                }

                // Create a marker for each place.
                markers.push(new google.maps.Marker({
                    map: map,
                    icon: icon,
                    title: place.name,
                    position: place.geometry.location
                }));

                if (place.geometry.viewport) {
                    // Only geocodes have viewport.
                    bounds.union(place.geometry.viewport);
                } else {
                    bounds.extend(place.geometry.location);
                }
            });
            map.fitBounds(bounds);
        });

        //Pick location
        //Listen for any clicks on the map.
        google.maps.event.addListener(map, 'click', function (event) {
            //Get the location that the user clicked.
            var clickedLocation = event.latLng;
            //If the marker hasn't been added.
            //Create the marker.
            marker = new google.maps.Marker({
                icon: icon,
                position: clickedLocation,
                map: map,
                draggable: true //make it draggable
            });
            //Listen for drag events!
            google.maps.event.addListener(marker, 'dragend', function (event) {
                markerLocation();
            });
            //Get the marker's location.
            markerLocation();
        });
    }

    //This function will get the marker's current location and then add the lat/long
    //values to our textfields so that we can save the location.
    function markerLocation() {
        //Get location.
        var currentLocation = marker.getPosition();
        var lat = currentLocation.lat();
        var lng = currentLocation.lng();
        document.getElementById('Latitude').value = lat;
        document.getElementById('Longitude').value = lng;

        //Near by query array of conditions
        var queries = ['church', 'school', 'train_station', 'hindu_temple', 'hospital', 'mosque'];
        var request;
        service = new google.maps.places.PlacesService(map);
        for (var i = 0; i < queries.length; i++) {
            request = {
                location: currentLocation,
                radius: '5000',
                type: [queries[i]]
            };
            service.nearbySearch(request, handlePlaceResponse);
        }
    }

    //Handle place response
    function handlePlaceResponse(results, status) {
        var queries = ['church', 'school', 'train_station', 'hindu_temple', 'hospital', 'mosque'];
        if (status == google.maps.places.PlacesServiceStatus.OK) {
            var places = [];
            var type = "";
            for (var i = 0; i < queries.length; i++) {
                for (var j = 0; j < results[0].types.length; j++) {
                    if (results[0].types[j] === queries[i]) {
                        type = queries[i];
                        break;
                    }
                }
            }
            for (var i = 0; i < results.length; i++) {
                places.push({ "name": results[i].name, "lat": results[i].geometry.location.lat(), "lng": results[i].geometry.location.lng() });
            }
            document.getElementById(type).value = JSON.stringify(places);
        }
        //map.fitBounds(bounds);
        //map.setCenter(bounds.getCenter());
    }
    //Load the map when the page has finished loading.
    google.maps.event.addDomListener(window, 'load', initMap);
    document.bind("projectLoadComplete", initMap);
</script>

<div class="container-contact100">
    <div class="wrap-contact100">
        @using( Html.BeginForm( "Create", "Property", FormMethod.Post, new { @class = "contact100-form validate-form", role = "form", enctype = "multipart/form-data" } ) )
        {
            @Html.AntiForgeryToken()
            <span class="contact100-form-title">
                Add Property
            </span>
            @Html.ValidationSummary( "", new { @class = "text-danger" } )

            <div class="wrap-input100 validate-input bg1 rs1-wrap-input100" data-validate="Enter plot area">
                <span class="label-input100">Area *</span>
                @Html.TextBoxFor( m => m.Area, new { @class = "input100", @placeholder = "Area" } )
            </div>

            <div class="wrap-input100 input100-select bg1 rs1-wrap-input100">
                <span class="label-input100">Category *</span>
                <div>
                    @Html.DropDownListFor( m => m.Category, Model.Categories, new { @class = "form-control" } )
                </div>
            </div>
            <div class="wrap-input100 bg1 rs1-wrap-input100">
                <span class="label-input100">Minimum Land Price</span>
                @Html.TextBoxFor( m => m.LandPrice, new { @class = "input100", @placeholder = "Minimum price for Land" } )
            </div>
            <div class="wrap-input100 bg1 rs1-wrap-input100">
                <span class="label-input100">Minimum Apartment Price</span>
                @Html.TextBoxFor( m => m.HousePrice, new { @class = "input100", @placeholder = "Minimum price for Apartment" } )
            </div>
            <div class="wrap-input100 bg1">
                <span class="label-input100">Pick loction from map</span>
                <input id="pac_input" class="controls" type="text" placeholder="Search Box"><br />
                <div id="map" style="width: 100%; height: 400px; border: 1px solid #5E5454; border-radius:2px; margin-bottom:15px;"></div>
            </div>
            <div class="form-group">
                @Html.LabelFor( model => model.Images, htmlAttributes: new { @class = "control-label col-md-2" } )
                <div class="col-md-10">
                    @Html.TextBoxFor( model => model.Images, "", new { @type = "file", @multiple = "multiple" } )
                </div>
            </div>
            <div>
                @Html.HiddenFor( m => m.Latitude )
                @Html.HiddenFor( m => m.Longitude )
                @Html.HiddenFor( m => m.church )
                @Html.HiddenFor( m => m.school )
                @Html.HiddenFor( m => m.train_station )
                @Html.HiddenFor( m => m.hindu_temple )
                @Html.HiddenFor( m => m.hospital )
                @Html.HiddenFor( m => m.mosque )
            </div>
            <div class="container-contact100-form-btn">
                <input type="submit" class="contact100-form-btn" value="Add Property &raquo;" />
            </div>
        }
    </div>
</div>
